"use strict";

function GUIManager(parent, logId) {
	this._table = document.getElementById("memberList");
	this._parent = parent;
	this._logId = logId;
	this._ondelete = function(id) { alert("delete pushed for id: " + id); };
	this._onedit = function(id) { alert("update pushed for id: " + id); };
	this._oncreate = function() { alert("creating entry for a member: "); };
}

GUIManager.prototype.getLogId = function() {
	return this._logId;
}

GUIManager.prototype.createMembers = function(newMembers) {
	for(var x = 0; x < newMembers.length; x++) {
		var row = this._table.insertRow(-1);
		row.id = "m" + newMembers[x].memberId;
		this.appendCells(row, newMembers[x]);
	}
}

GUIManager.prototype.show = function(responseText) {
	var obj = JSON.parse(responseText);
	var obj = obj.updates;
	if(obj.status) 
		this._logId = obj.logId;

	if(obj.newMembers) {
		if(obj.newMembers instanceof Array)
			this.createMembers(obj.newMembers);
		else 
			this.createMembers([obj.newMembers]);
	}
	if(obj.deletedMembers) {
		if(obj.deletedMembers instanceof Array) 
			this.deleteMembers(obj.deletedMembers);
		else
			this.deleteMembers([obj.deletedMembers]);
	}
	if(obj.updatedMembers) {
		if(obj.updatedMembers instanceof Array)
			this.updateMembers(obj.updatedMembers);
		else
			this.updateMembers([obj.updatedMembers]);
	}
}

GUIManager.prototype.deleteMembers = function(deletedMembers) {
	for(var x = 0; x < deletedMembers.length; x++) {
		this.deleteMemberById(deletedMembers[x]);
	}
}

GUIManager.prototype.updateMembers = function(updatedMembers) {
	for(var x = 0; x < updatedMembers.length; x++) {
		var row = document.getElementById("m" + updatedMembers[x].memberId);
		this.updateCells(row, updatedMembers[x]);
	}
}

GUIManager.prototype.updateMember = function(member) {
	var row = document.getElementById("m" + member.memberId);
	this.updateCells(row, member);
}

GUIManager.prototype.updateCells = function(row, member) {
	row.cells[0].innerHTML = member.firstname;
	row.cells[1].innerHTML = member.lastname;
	row.cells[2].innerHTML = member.address;
	row.cells[3].innerHTML = member.phone;
}

GUIManager.prototype.hideInputs = function(responseText) {
	var obj = JSON.parse(responseText);
	obj = obj.updatedMember;
	var p = document.getElementById("fail");
	if(obj.status) {
		document.getElementById("manageMember").style.display = "none";
		p.innerHTML = "";
	} else {
		p.innerHTML = "woops! something went wrong!";
	}
} 

GUIManager.prototype.deleteMemberById = function(id) {
	var list = this._table.rows;
	for(var x = 1; x < list.length; x++) {
		if(list[x].id == "m" + id) {
			this._table.deleteRow(x); 
			break;
		}
	}
}

GUIManager.prototype.appendCells = function(row, member) {
	var cells = new Array(6);
	for(var x = 0; x < 6; x++) {
		cells[x] = row.insertCell(x);
	}

	cells[0].innerHTML = member.firstname;
	cells[1].innerHTML = member.lastname;
	cells[2].innerHTML = member.address;
	cells[3].innerHTML = member.phone;

	var button0 = document.createElement("input");
	button0.type = "button";
	button0.value = "Endre";
	button0.onclick = (function() {
		this.editMemberDialog(member.memberId);
	}).bind(this);

	var button1 = document.createElement("input");
	button1.type = "button";
	button1.value = "Slett";
	button1.onclick = (function() {
		this._ondelete(member.memberId);
	}).bind(this);

	cells[4].appendChild(button0);
	cells[5].appendChild(button1);
}



GUIManager.prototype.editMemberDialog = function(id) {
	document.getElementById("manageMember").style.display = "inline";

	if(id) {

		var row = document.getElementById("m"+id);
	
		var fields = this._parent.inputs();

		for(var x = 0; x < fields.length; x++) {
			fields[x].value = row.cells[x].innerHTML;
		}

		document.getElementById("submitMember").onclick = (function() {
			this._onedit(id);
		}).bind(this);
	} else {
		
		document.getElementById("submitMember").onclick = (function() {
			this._oncreate();
		}).bind(this);
	}
}

GUIManager.prototype.removed = function(responseText) {
	var obj = JSON.parse(responseText);
	obj = obj.updatedMember;
	if(obj.status) {
		var list = this._table.rows;
		for(var x = 1; x < list.length; x++) {
			if(list[x].id == "m"+obj.memberId) {
				this._table.deleteRow(x);
				break;
			}
		}
	}
}
