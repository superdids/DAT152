"use strict";

(function() {
	var lastet = function() {
		console.log("Dokumentet er ferdig lastet.");
	};
	
	window.addEventListener('load', lastet, true);
})();

//Oppgave 1
function oppgave1() {
	var promptType = typeof prompt;
	var read = prompt("Enter some data:");
	alert(read);
	alert("The type of the prompt function is: " + promptType);
	
}

//Oppgave 2
function oppgave2() {
	var first = document.getElementById('oppgave2first').value;
	var second = document.getElementById('oppgave2second').value;
	
	var setDocument = function(arga, argb) {
		document.getElementById(arga).innerHTML = argb;
	}
	
	var parse = function(arg) {
		return parseInt(arg, 2);
	}
	
	first = parse(first); second = parse(second);
	
	if(isNaN(first)) first = 0;
	if(isNaN(second)) second = 0;
	
	setDocument('and', "AND: " + (first & second).toString(2));
	setDocument('or', "OR:  " + (first | second).toString(2));
	setDocument('xor', "XOR: " + (first ^ second).toString(2));
}

//Oppgave 3
function compute() {
	var first = document.getElementById("first").value;
	var second = document.getElementById("second").value;
	
	function num(input) { return parseInt(input); };
	function set(arg, val) {
		document.getElementById(arg).innerHTML = val;
	}
	
	first = num(first);
	second = num(second);
	
	var error = false;
	if(isNaN(first)) {
		error = true;
		set("erra", "Not a number");
	} else {
		set("erra", "");
	}
	if(isNaN(second)) {
		error = true;
		set("errb", "Not a number");
	} else {
		set("errb", "");
	}
	
	if(error) {
		set("result", "");
	} else {
		set("erra", "");
		set("errb", "");
		set("result", (first+second));
	}
	
}

//Oppgave 4
//Vet ikke om jeg gidder å lage regex for dette...
function oppgave4() {
	var url = document.getElementById('url').value;
	url = encodeURI(url);
	document.getElementById('oppgave4result').innerHTML = url;
}


//Oppgave  5
//encodeURI(arg) koder spesialtegn
//encodeURIComponent(arg) koder i tilegg tegnene ', / ? : @ & = + $ #'

//Oppgave 6
function oppgave6() {
	var input = document.getElementById('six').value;
	eval(input);
}

//Oppgave 7
//this refereres av window objektet, og variablen navn ligger i skopet til window.
var navn = "Ole";
this.navn += " Olsen";
console.log(this);

function skriv() {
	window.alert(navn);
}

//Oppgave 8
//this refererer til objektet main
var main = {
	count: 0,
	endre: function(elm) {
		++this.count;
		elm.value = (this.count%2 == 0) ? "Jeg ble klikket" : "Slutt å trykke!!";
	}
};

//Oppgave 9
//Ved å kalle mainNine.visThis() gjennom onclick hendelsen 
//fra et input vil typen fortsatt være objektet mainNine
var mainNine = {
	visThis: function() {
		console.log(this);
	}
};

//Ved å ikke sende et argument vil this refereres objektet mainNine
mainNine.visThis();

//Oppgave 10
//
var timerDemo = {
	timer: function() {
		setTimeout(this.visThis, 2000);
	},
	visThis: function() {
//		console.log("Oppgave 10");
		console.log(this);
	}
};

//Oppgave 11
var eventdemo = {
	load: function() {
		window.addEventListener('load', this.visThis, false);
	},
	visThis: function() {
		console.log(this);
	}
};

//this refererer til objektet eventdemo
//eventdemo.load();
//this vil nå referere til window objektet
//eventdemo.visThis();

//Oppgave 12
var array = new Array();
var tmp = "";
for(var x = 0; x < 10; x++) {
//	array[x] = Math.random() * 100;
//	tmp += array[x] + " ";
	array[x] = new Date(2015, Math.floor(Math.random()*12), Math.floor(Math.random()*29));
	tmp += array[x].toString();
}

console.log(tmp);
array.sort((function(a,b) {
	return a > b;
})); 
//Hvorfor opprette et predikat når det bare kan sendes direkte
//som en anonymfunksjon... Eller jo, det finnes tilfeller når 
//det må utføres, når jeg tenker meg om!
tmp = "";
for(var x = 0; x < 10; x++) {
	tmp += array[x] + " ";
}

console.log(tmp);

//Oppgave 13 er easymode, så forsøker å simulere en stabel på HTML side
var array;
var current;
window.onload = function() {
	var list = document.getElementById('stack').children;
	current = list.length;
	for(var x = 0; x < current; x++) {
		array[x] = list[x].textContent;
	}
}

function pop() {
	if(current > 0) {
		document.getElementById('stack').removeChild(document.getElementById('stack').children[0]);
		--current;
		array.pop();
	}
}

function push() {
	var toPush = document.createElement('li');
	toPush.textContent = document.getElementById('pushvalue').value;
	array.push(toPush); 
	++current;
	var list = document.getElementById('stack');
	
	list.insertBefore(toPush, list.childNodes[0]);
}


function oppgave14() {
	var res = document.getElementById('oppgave14res');
	res.innerHTML = res.innerHTML.split(":")[0] + ":";
	var dd = document.getElementById('oppgave14dd');
	var mm = document.getElementById('oppgave14mm');
	var yyyy = document.getElementById('oppgave14yyyy');
	
	var year = yyyy.value; 
	year = parseInt(year);
	var invalid = false;
	if(isNaN(year) || year < 0) {
		invalid = true;
		yyyy.style.color = "red";
	}
	
	var month = mm.value;
	month = parseInt(month);
	if(isNaN(month) || month < 0 || month > 12) {
		invalid = true;
		mm.style.color = "red";
	}
	
	var day = dd.value;
	day = parseInt(day);
	if(isNaN(day) || day < 0 || day > 32) {
		invalid = true;
		dd.style.color = "red";
	}
	
	if(invalid) return;
	
//	var dato = new Date(year, mm.value, 0);
//	alert(dato);
}