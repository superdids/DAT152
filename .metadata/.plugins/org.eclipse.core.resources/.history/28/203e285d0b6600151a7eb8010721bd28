"use strict";

/**
 * Konstruktørfunksjon med tilhørende prototype-funksjoner for å 
 * håndtere medlemslisten.
 */

/**
 * Selve konstruktørfunksjonen utfører følgende:
 * - Instansiering av referanse til tabell-objektt som representerer
 *   medlemslisten
 * - Oppretter egenskap som representerer konteksten til objektet som
 *   opprettet instans av GUIManager
 * - Oppretter egenskap som representerer logId
 * - Egenskapene ondelete, onedit og oncreate, som må overskrives 
 *   for å utføre ønsket funksjonalitet.
 */
function GUIManager(parent, logId) {
	this._table = document.getElementById("memberList");
	this._parent = parent;
	this._logId = logId;
	this._ondelete = function(id) { alert("delete pushed for id: " + id); };
	this._onedit = function(id) { alert("update pushed for id: " + id); };
	this._oncreate = function() { alert("creating entry for a member... "); };
}

/**
 * Prototype-funksjon som returnerer nåværende logId. 
 * @returns logId med verdi > -2.
 */
GUIManager.prototype.getLogId = function() {
	return this._logId;
}

/**
 * Prototype-funksjon for å opprette, slette og oppdatere medlemmer
 * basert på respons fra tjener.
 * @param responseText respons fra tjener
 */
GUIManager.prototype.show = function(responseText) {
	var obj = JSON.parse(responseText);
	var obj = obj.updates;
	if(obj.status) 
		this._logId = obj.logId;

	if(obj.newMembers)
		this.createMembers(this.toArray(obj.newMembers));
	
	if(obj.deletedMembers)
		this.deleteMembers(this.toArray(obj.deletedMembers));
	
	if(obj.updatedMembers)
		this.updateMembers(this.toArray(obj.updatedMembers));
}

/**
 * Funksjon som forsøker å returnere parameteren som en Array-forekomst, 
 * uavhengig av type
 * @param arg parameteret som skal returneres som en Array-forekomst.
 * @returns Array-forekomst
 */
GUIManager.prototype.toArray = function(arg) {
	if(arg instanceof Array) return arg;
	else return [arg];
}

/**
 * Oppretter ett eller flere medlemmer og plasserer disse i nye rader i 
 * tabellen.
 * @param newMembers Medlemmet (eller medlemmene) som skal opprettes,  
 * forbeholdt at parameteren mottar en Array-forekomst.
 */
GUIManager.prototype.createMembers = function(newMembers) {
	for(var x = 0; x < newMembers.length; x++) {
		var row = this._table.insertRow(-1);
		row.id = "m" + newMembers[x].memberId;
		this.appendCells(row, newMembers[x]);
	}
}

/**
 * Sletter ett eller flere medlemmer og fjerner disse fra aktuelle 
 * rader i tabellen.
 * @param deletedMembers
 */
GUIManager.prototype.deleteMembers = function(deletedMembers) {
	for(var x = 0; x < deletedMembers.length; x++) {
		this.deleteMemberById(deletedMembers[x]);
	}
}

/**
 * Oppdaterer ett eller flere eksisterende 
 * @param updatedMembers
 */
GUIManager.prototype.updateMembers = function(updatedMembers) {
	for(var x = 0; x < updatedMembers.length; x++) {
		var row = document.getElementById("m" + updatedMembers[x].memberId);
		this.updateCells(row, updatedMembers[x]);
	}
}

GUIManager.prototype.updateMember = function(member) {
	var row = document.getElementById("m" + member.memberId);
	this.updateCells(row, member);
}

GUIManager.prototype.updateCells = function(row, member) {
	row.cells[0].innerHTML = member.firstname;
	row.cells[1].innerHTML = member.lastname;
	row.cells[2].innerHTML = member.address;
	row.cells[3].innerHTML = member.phone;
}

GUIManager.prototype.hideInputs = function(responseText) {
	var obj = JSON.parse(responseText);
	obj = obj.updatedMember;
	var p = document.getElementById("fail");
	if(obj.status) {
		document.getElementById("manageMember").style.display = "none";
		p.innerHTML = "";
	} else {
		p.innerHTML = "woops! something went wrong!";
	}
} 

GUIManager.prototype.deleteMemberById = function(id) {
	var list = this._table.rows;
	for(var x = 1; x < list.length; x++) {
		if(list[x].id == "m" + id) {
			this._table.deleteRow(x); 
			break;
		}
	}
}

GUIManager.prototype.appendCells = function(row, member) {
	var cells = new Array(6);
	for(var x = 0; x < 6; x++) {
		cells[x] = row.insertCell(x);
	}

	cells[0].innerHTML = member.firstname;
	cells[1].innerHTML = member.lastname;
	cells[2].innerHTML = member.address;
	cells[3].innerHTML = member.phone;

	var button0 = document.createElement("input");
	button0.type = "button";
	button0.value = "Endre";
	button0.onclick = (function() {
		this.editMemberDialog(member.memberId);
	}).bind(this);

	var button1 = document.createElement("input");
	button1.type = "button";
	button1.value = "Slett";
	button1.onclick = (function() {
		this._ondelete(member.memberId);
	}).bind(this);

	cells[4].appendChild(button0);
	cells[5].appendChild(button1);
}



GUIManager.prototype.editMemberDialog = function(id) {
	document.getElementById("manageMember").style.display = "inline";
var fields = this._parent.inputs();
	if(id) {

		var row = document.getElementById("m"+id);

		for(var x = 0; x < fields.length; x++) {
			fields[x].value = row.cells[x].innerHTML;
		}

		document.getElementById("submitMember").onclick = (function() {
			this._onedit(id);
		}).bind(this);
	} else {
		for(var x = 0; x < fields.length; x++) {
			fields[x].value = "";
		}
		document.getElementById("submitMember").onclick = (function() {
			this._oncreate();
		}).bind(this);
	}
}

GUIManager.prototype.removed = function(responseText) {
	var obj = JSON.parse(responseText);
	obj = obj.updatedMember;
	if(obj.status) {
		var list = this._table.rows;
		for(var x = 1; x < list.length; x++) {
			if(list[x].id == "m"+obj.memberId) {
				this._table.deleteRow(x);
				break;
			}
		}
	}
}
